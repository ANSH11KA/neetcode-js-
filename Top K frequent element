Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:
Input: nums = [1], k = 1
Output: [1]
Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.



/**** solution****////
var topKFrequent = function(nums, k) {
    // Step 1: Count the frequency of each element
    const freqMap = new Map();
    for (const num of nums) {
        freqMap.set(num, (freqMap.get(num) || 0) + 1);
    }

    // Step 2: Create buckets for frequencies
    const buckets = Array(nums.length + 1).fill(null).map(() => []);
    for (const [num, freq] of freqMap) {
        buckets[freq].push(num);
    }

    // Step 3: Collect the top k elements from the buckets
    const result = [];
    for (let i = buckets.length - 1; i >= 0 && result.length < k; i--) {
        if (buckets[i].length > 0) {
            result.push(...buckets[i]);
        }
    }

    return result.slice(0, k); // Ensure only k elements are returne
  
    
};
