/**Given an array of strings strs, group the 
anagrams
 together. You can return the answer in any order.
Example 1:
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Explanation:
There is no string in strs that can be rearranged to form "bat".
The strings "nat" and "tan" are anagrams as they can be rearranged to form each other.
The strings "ate", "eat", and "tea" are anagrams as they can be rearranged to form each other.
Example 2:
Input: strs = [""]
Output: [[""]]
Example 3:
Input: strs = ["a"]
Output: [["a"]]
Constraints:
1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.***/




/*** solution**///


var groupAnagrams = function(strs) {
    const map = new Map();

    for (const str of strs) {
        // Create a frequency key
        const charCount = Array(26).fill(0); // Array of size 26 for each letter a-z
        for (const char of str) {
            charCount[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;
        }

        const key = charCount.join(','); // Convert frequency array to a string key

        // Group words with the same frequency key
        if (!map.has(key)) {
            map.set(key, []);
        }
        map.get(key).push(str);
    }

    // Return grouped anagrams as an array
    return [...map.values()];


};
